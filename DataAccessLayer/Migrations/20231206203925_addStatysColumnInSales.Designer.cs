// <auto-generated />
using System;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(StoresDbContext))]
    [Migration("20231206203925_addStatysColumnInSales")]
    partial class addStatysColumnInSales
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccessLayer.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTime");

                    b.Property<double>("DeliveryCost")
                        .HasColumnType("double")
                        .HasColumnName("deliveryCost");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "deliveries-product_idx");

                    b.ToTable("deliveries", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Groupproduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("NameGroupproducts")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name_groupproducts");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("groupproducts", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int")
                        .HasColumnName("availableQuantity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("GroupProductsId")
                        .HasColumnType("int")
                        .HasColumnName("groupProducts_id");

                    b.Property<string>("NameProducts")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name_products");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int")
                        .HasColumnName("suplier_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupProductsId" }, "products-group_idx");

                    b.HasIndex(new[] { "SuplierId" }, "products-suplier_idx");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("SalesAmount")
                        .HasColumnType("double")
                        .HasColumnName("salesAmount");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "sales-product_idx");

                    b.HasIndex(new[] { "StoreId" }, "sales-store_idx");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("NameStores")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name_stores");

                    b.Property<string>("SocialNetwork")
                        .IsRequired()
                        .HasColumnType("enum('Instagram','Facebook','TikTok','Telegram','Viber')")
                        .HasColumnName("socialNetwork");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("contacts");

                    b.Property<string>("NameSuppliers")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name_suppliers");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3)
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Delivery", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Product", "Product")
                        .WithMany("Deliveries")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("deliveries-product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Product", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Groupproduct", "GroupProducts")
                        .WithMany("Products")
                        .HasForeignKey("GroupProductsId")
                        .IsRequired()
                        .HasConstraintName("products-group");

                    b.HasOne("DataAccessLayer.Models.Supplier", "Suplier")
                        .WithMany("Products")
                        .HasForeignKey("SuplierId")
                        .IsRequired()
                        .HasConstraintName("products-suplier");

                    b.Navigation("GroupProducts");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Sale", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("sales-product");

                    b.HasOne("DataAccessLayer.Models.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("sales-store");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Groupproduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Product", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
